--> ABSTRACT
  1- Abstract Methods must be overridden.
  2- Abstarct methods can not be static as static methods can not be overridden.
  3- Abstarct methods can not be final as final methods can not be overridden.
  4- Abstarct Methods can only be defined in Abstract class.
  5- we can overide abstract method as anonoymous functions also
  
  6- Abstarct class can have all kinds of variable i.ie final,static etc.
  7- Abstract class can have normal static,final,default and all kind of methods
  8- Abstract class can not be instatiated but can be inherited.
  9- Abstract class can have constructor
  10- Abstract class can also be access if we create a anonymous function if we do not want to extend it to class
  

--> INTERFACES
  1- All the varibles in interface are by default final and static as interafce can not be instantiated on its own.
  2- interface can have default and static methods with their definition
  3- No Methods can be final in interface.
  4- Interface methods can also be defined with anonymous function concept , if we do not want to implement it to class.
  5- All methods in interface except default and static are by default abstract.
  
--> DIFFERENCE OF ABSTRACT AND INTEFACE
1) Abstract class doesn't support multiple inheritance.	Interface supports multiple inheritance.
2) Abstract class can have final, non-final, static and non-static variables.	Interface has only static and final variables.
3) Abstract class can provide the implementation of interface.	Interface can't provide the implementation of abstract class.
 
 
 STATIC AND FINAL
 ----------------
 1- Staic means the memory for that variable and method is created only once in enitre program and that the field can  be accessed 
 with classname and directly if accessed in same class in which it is declared and with object also.
 2- Final makes the field imuttable i.e non changeable, and class non-inheritable.
 3- A class can not be static unless it is Innner class or Nested class
 4- Static Methods can be final but not abstract.
 5- In static methods we can use static variables only.
 
--> Final
  1- It makes a class Imuutable
  2- Final Methods and class can not be Overridden and Inherited respectively
  3- Final Methods and Variable can be static
  4- It can not have setters 
  5- Maps can not be Imumutable
  6- Make Deep copy of  objects in contructor of final class
  
---> Consumer is functional Interface which accept one arguement and gives result. It hs 2 functions: .accept(), .andThen()
---> Supplier is functional Interface which does not accept any arguement and gives result. It hs 1 functions: .get()
---> Reducer,Stream,Filter,Predicate,Supplier EXAMPLE:
List<Integer> integers= Arrays.asList(1,2,3,4,5,6,7,8,9);
        Predicate<Integer> evenFilter=e->e%2==0;
        Supplier<Integer> x=()->integers.stream().filter(evenFilter).reduce(0,(a1, a2) ->a1+a2);
        System.out.println(x.get());
    

--> . In Java, all non-static methods are by default "virtual functions." Only methods marked with the keyword final, which cannot be overridden, along with private methods, which are not inherited, are non-virtual
  
--> contructor autowiring is preferred over @Autowire annotation to maintain robustness

--> for stroring password char[] is used in place of string because we can perform sanity on char [] but string is imuutable so if change the content of string then also pass word remains some where in memory
 
--> JVM ,JDK,JRE
  JDK - Are tools for for develoment
  JRE- Eneviroment for running java applications
  JVM - Interprets the code  and run un jre

--> == check the object memory pointed but .equals() checks if the value of 2 objects are equal or not

--> stack memory stores the variables and method execution where as heap memory is ued in duynamic memory allocation like if there is memory needed in between eexecution.

--> method overloading is compile time polymorphism and method overiding is runtime polymorphism

--> check exception: check in comile time like file not found in file handeling
    unchecked exception: checked during runtime like divinf number by zero


--> synchronization in java
    1- Mutual exclusive
       1- Method(Synchronized method)
       2- Block(like in redemption flow )
       3- static synchronization like as i did in printing odd even numbers in thread wise
    2- Cooperation Thread Communication

--> Hashmap vs hash table, internal working of hashmap
   1-Hashmap accepts one null key and multiple null value and is not thread safe, where as hash table does not accepts null value or key and thread safe
   2- Final map can be changes as map points to a memory and we can add or remove more elements.
   3- concurrentHashMap are thread safe

--> String builder is more efficient and not thread safe but String buffer is less efficient and thread safe  

/ String (immutable)
String s = "Hello";
s += " World"; // Creates a new String object
// StringBuilder (mutable, not thread-safe)
StringBuilder sb = new StringBuilder("Hello");
sb.append(" World"); // Modifies the same object
// StringBuffer (mutable, thread-safe)
StringBuffer sbf = new StringBuffer("Hello");
sbf.append(" World"); // Thread-safe modification

--> final makes variable immutable, finally is executed anyhow after try catch even after return in catch, finalize is used for garbage coolection(System.gc)

--> Handeling exception in generic way in spring boot
@ControllerAdvice
public class ExceptionHandling {
    @ExceptionHandler(CustomException.class)
    public ResponseEntity<Object> getCustomExceptionMessage(CustomException customException){
        return new ResponseEntity<>(customException.getMessage(), HttpStatus.BAD_REQUEST);
    }
}


--> Executor service
    1- Executor services use blocking queue which is thread safe.

--> @Service, @Component, @ Repository

--> @ManyToOne
    @JoinColumn(name="dashboard_client_id",nullable = false)
    private DashboardClientMasterModel dashboardClientMasterModel;
--> @ManyToMany
    @JoinTable(name = "dealer_details_group_mapping", joinColumns = @JoinColumn(name = "dealer_id"), 
    inverseJoinColumns =@JoinColumn(name = "group_id"))
    private List<DashboardClientDealerGroupModel> dashboardClientDealerGroupModels;

 --> InnoDB has row-level locking. MyISAM only has full table-level locking

--> @Controller annotation indicates that the class is a “controller” like a web controller.
    @RestController annotation indicates that class is a controller where
    @RequestMapping methods assume @ResponseBody semantics by default.
    In @Controller, we need to use @ResponseBody on every handler method
    
   
 --> In function overiding we can not overide public function from superclass  to private function in subclass
 

-->  public Predicate toPredicate(Root<PromocodeMasterModel> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                if(fromDate==null && toDate==null){
                    return cb.isTrue(cb.literal(true)); // always true = no filtering
                }
                query.orderBy(cb.asc(root.get("updateTimestamp")));
                if(fromDate==null && toDate!=null){
                    return cb.lessThanOrEqualTo(root.get("useDateTime"),toDate);
                }
                if(fromDate!=null && toDate==null){
                    return cb.greaterThanOrEqualTo(root.get("useDateTime"),fromDate);
                }
                if(fromDate!=null && toDate!=null && fromDate.before(toDate)){
                    return cb.between(root.get("useDateTime"),fromDate,toDate);
                }
                return cb.isTrue(cb.literal(true)); // always true = no filtering
}


-> Lifecycle of threads in java
-> Jpa vs Hibernate

-> serialization is used to convert object to bytesteam and deserialixation is viceversa.
  Student s1 =new Student(211,"ravi");                                                 
  FileOutputStream fout=new FileOutputStream("f.txt");    
  ObjectOutputStream out=new ObjectOutputStream(fout);    
  out.writeObject(s1);    
  out.flush();   
  
  ObjectInputStream in=new ObjectInputStream(new FileInputStream("f.txt"));  
  Student s=(Student)in.readObject();  
  //printing the data of the serialized object  
  System.out.println(s.id+" "+s.name);  

-> @Transient is used to prevent the a filed in objet to get serialized
 
-> In function overiding return type can be different. 
 
 
public interface MyService {

    void doWork();

}

@Service("firstService")
public static class FirstServiceImpl implements MyService {

    @Override
    public void doWork() {
        System.out.println("firstService work");
    }

}

@Service("secondService")
public static class SecondServiceImpl implements MyService {

    @Override
    public void doWork() {
        System.out.println("secondService work");
    }

}

@Component
public static class FirstManager {

    @Autowired // inject FirstServiceImpl
    @Qualifier("firstService") 
    private MyService myService;

}

@Component
public static class SecondManager {

    @Autowired // inject FirstServiceImpl
    @Qualifier("secondService") 
    private MyService myService;

}

--> Unitest cases,Mockito   
UNIT TESting
------------
String name="hi";
Alex alex=new Alex(name);
Mockito.when(employeeRepository.findByName(name))
      .thenReturn(alex);
 assertThat(name).equals(alex.getName)


THREAD LIFECYCLE
------------------

        |---------1- NewBorn State ( thread has been created but not running, when we create object  of thread)
        |     |-<>2- Runable State (When we call t1.start method, but still not running , but ready to run, available in queue to get executed)
t1.stop |     |-<>3- Running state
        |         4- Blocked State (when we use sleep,wait suspend state,and  thread can be made runnable by notify and resume method
        |-------->5- Dead State(when we call t1.stop())


1- Multiple public static void main
2- Checked and unchecked execpetion
3- How final class is immutable with example of class
4- Microservice architecture
5- Functional interface and lamda expresssion
6- throws vs throw in exception handeling


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Versioning in Spring boot API
------------------------------
-> we need versioning in api to manage and update api without disrupting the existing clients
-> evolve the api
1- URI Path Versioning: @Getmapping("/api/v1/person")
2- Query Parameters Versioning:@Getmapping(path = "/api/person", params = "version=1")
3- Custom Header Versioning:@Getmapping(path = "/api/person", headers = "X-API-VERSION=1")
4- Content Negotiation Versioning: @Getmapping(path = "/api/person", produces = "application/vnd.company.app-v1+json")

Monolithic and MicroService Architecture
-----------------------------------------

Monolithic: Entire software is constructed in Single unit with single database.
Best in
-> Small application
-> Application requiring Limited development
-> Frequent changes not expected
-> Low operational Complexity

MicroService: software is broken down in to small and independent units each having their own database so that the change in
one microservice does not effect other microservice.
Best in softwares like
-> With rapid development
-> Require High scalibility
-> Leverageing different technology
-> Dynamically evvolving software

Microservices communicate in either of 2 ways below
-> Asynchronous Communication throught Messaging queue like KAFKA
-> Synchronous Communication Throught Http Rest Api call

MircroService Registry is a central component where we keep the track of all microservices running. Most common tool for this in spring boot is eureka
Fot this we need 2 component
1- Eureka Server : Server where microservice will register
2- Eureka Client: It is microservice which will register itself in eureka Server @EnableEurekaServer

Data join in microservices
--------------------------
1- Api composition: We have one aggregator service which call multiple microservices merges the data and send to client
2- Database-per-service + Asynchronous Data Replication: Microservices publish a event in kakfa queue and other microservice consumes that data to store data locally

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Sure! Here are a few advanced Java questions for a senior software engineer:

Concurrency and Multithreading:

How does the volatile keyword work in Java? Can you give an example of when you would use it over synchronized or Lock?

Explain the concept of a thread pool and the advantages of using it. How would you implement a custom thread pool in Java?

JVM and Performance:

Describe the garbage collection process in Java. What are the different garbage collectors available, and how do you choose the right one for your application?

How would you diagnose a memory leak in a Java application running in production?

Design Patterns:

Can you explain the Singleton design pattern and its thread-safety implications in Java? How would you implement it in a multi-threaded environment?

How does the Factory Method pattern differ from Abstract Factory in Java? Can you give examples where each would be useful?

Java 8 and Beyond:

What are the main differences between Optional and null in Java, and when would you use one over the other?

Explain how Streams work in Java 8. Can you give an example where a stream would be inefficient, and how would you address that?

Java Memory Model:

What is the difference between == and .equals() in Java? How does this relate to the Java memory model and object identity?

What are happens-before and happens-after relationships in the Java Memory Model?

Reflection and Dynamic Proxies:

How does Java Reflection work, and what are some performance implications of using it?

What is a dynamic proxy in Java, and how would you create one programmatically?

Design and Architecture:

Can you walk through the process of designing a highly scalable microservices architecture using Java? How would you ensure fault tolerance and high availability?

How would you handle distributed transactions in a Java-based microservices architecture?

Let me know if you need clarification or more specific questions!

-> DO retrun type matters in function overloading
-> Collision in HAspMAp in java

